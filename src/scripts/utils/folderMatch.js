// ===== FOLDER ID MATCHING UTILITY =====
// Eski ve yeni format klas√∂r ID e≈üle≈ütirmesi i√ßin yardƒ±mcƒ± fonksiyonlar

/**
 * Not'un folderId'si ile klas√∂r ID'sini e≈üle≈ütir
 * Eski format uyumluluƒüu i√ßin √ßoklu e≈üle≈ütirme y√∂ntemleri kullanƒ±r
 * @param {string|null} noteFolderId - Notun folderId'si
 * @param {string} folderId - Klas√∂r ID'si
 * @param {Object} folder - Klas√∂r objesi (name, altIds vb. i√ßin)
 * @returns {boolean} - E≈üle≈üme varsa true
 */
function doesNoteMatchFolder(noteFolderId, folderId, folder = null) {
  // Null kontrol√º
  if (!noteFolderId || !folderId) return false;
  
  // 1. Direkt e≈üle≈üme (en g√ºvenilir)
  if (noteFolderId === folderId) return true;
  
  // 2. Normalize edilmi≈ü e≈üle≈üme (T√ºrk√ße karakterler dahil)
  const noteIdNormalized = (noteFolderId || '').toLowerCase().replace(/[^a-z0-9_ƒü√º≈üi√∂√ßƒ±]/g, '_');
  const folderIdNormalized = (folderId || '').toLowerCase().replace(/[^a-z0-9_ƒü√º≈üi√∂√ßƒ±]/g, '_');
  if (noteIdNormalized === folderIdNormalized) return true;
  
  // 2b. Sadece alfanumerik normalize (T√ºrk√ße karakter kaybƒ± durumu i√ßin)
  const noteIdNormalizedASCII = (noteFolderId || '').toLowerCase().replace(/[^a-z0-9_]/g, '_');
  const folderIdNormalizedASCII = (folderId || '').toLowerCase().replace(/[^a-z0-9_]/g, '_');
  if (noteIdNormalizedASCII === folderIdNormalizedASCII) return true;
  
  // 3. Klas√∂r adƒ± ile e≈üle≈üme (eski format: klas√∂r adƒ± direkt folderId olarak kullanƒ±lmƒ±≈ü)
  if (folder && folder.name) {
    // Orijinal klas√∂r adƒ± ile e≈üle≈üme (tam e≈üle≈üme - gev≈üek deƒüil)
    if (noteFolderId === folder.name) return true;
    
    // Klas√∂r adƒ±nƒ±n lowercase versiyonu ile e≈üle≈üme (tam e≈üle≈üme - gev≈üek deƒüil)
    if (noteFolderId === folder.name.toLowerCase()) return true;
    
    // Klas√∂r adƒ±nƒ±n normalize edilmi≈ü versiyonu ile e≈üle≈üme (tam e≈üle≈üme)
    const folderNameNormalized = folder.name.toLowerCase().replace(/[^a-z0-9_ƒü√º≈üi√∂√ßƒ±]/g, '_');
    if (noteIdNormalized === folderNameNormalized) return true;
    
    // Klas√∂r adƒ±nƒ±n ASCII normalize versiyonu ile e≈üle≈üme (tam e≈üle≈üme)
    const folderNameNormalizedASCII = folder.name.toLowerCase().replace(/[^a-z0-9_]/g, '_');
    if (noteIdNormalizedASCII === folderNameNormalizedASCII) return true;
    
    // √ñzel durum: T√ºrk√ße karakter kaybƒ± - SADECE BA≈ûTA 1 KARAKTER KAYBI DURUMU
    // √ñrnek: "√∂ncelikli" ‚Üí "ncelikli" (√∂ kaybolmu≈ü)
    // Sadece klas√∂r adƒ±nƒ±n SONUNA e≈üle≈üme (ba≈üta 1 karakter kaybƒ±)
    const folderNameLettersOnlyASCII = folder.name.toLowerCase().replace(/[^a-z]/g, '');
    const noteIdLettersOnlyASCII = (noteFolderId || '').toLowerCase().replace(/[^a-z]/g, '');
    
    if (noteIdLettersOnlyASCII && folderNameLettersOnlyASCII) {
      // Klas√∂r adƒ± daha uzunsa VE not ID klas√∂r adƒ±nƒ±n SONUNA e≈üle≈üiyorsa
      // Uzunluk farkƒ± tam 1 olmalƒ± (sadece 1 karakter kaybƒ±)
      if (folderNameLettersOnlyASCII.length === noteIdLettersOnlyASCII.length + 1 && 
          folderNameLettersOnlyASCII.endsWith(noteIdLettersOnlyASCII)) {
        return true;
      }
    }
  }
  
  // 4. Alt ID'ler ile e≈üle≈üme (tam e≈üle≈üme - gev≈üek deƒüil)
  if (folder && folder.altIds && Array.isArray(folder.altIds)) {
    // Orijinal alt ID'ler ile direkt e≈üle≈üme
    if (folder.altIds.includes(noteFolderId)) return true;
    
    // Normalize edilmi≈ü alt ID'ler ile e≈üle≈üme (tam e≈üle≈üme)
    const altIdsNormalized = folder.altIds.map(id => (id || '').toLowerCase().replace(/[^a-z0-9_ƒü√º≈üi√∂√ßƒ±]/g, '_'));
    if (altIdsNormalized.includes(noteIdNormalized)) return true;
    
    // ASCII normalize edilmi≈ü alt ID'ler ile e≈üle≈üme (tam e≈üle≈üme)
    const altIdsNormalizedASCII = folder.altIds.map(id => (id || '').toLowerCase().replace(/[^a-z0-9_]/g, '_'));
    if (altIdsNormalizedASCII.includes(noteIdNormalizedASCII)) return true;
  }
  
  return false;
}

/**
 * Notun hangi klas√∂re ait olduƒüunu bul
 * @param {string|null} noteFolderId - Notun folderId'si
 * @param {Array} folders - Klas√∂r listesi
 * @returns {Object|null} - E≈üle≈üen klas√∂r veya null
 */
function findFolderForNote(noteFolderId, folders = []) {
  if (!noteFolderId || !folders || folders.length === 0) return null;
  
  // T√ºm klas√∂rlerde ara
  for (const folder of folders) {
    if (doesNoteMatchFolder(noteFolderId, folder.id, folder)) {
      return folder;
    }
  }
  
  return null;
}

// Global exports
window.doesNoteMatchFolder = doesNoteMatchFolder;
window.findFolderForNote = findFolderForNote;

console.log('üîó Folder Match utility y√ºklendi');

